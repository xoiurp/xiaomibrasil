"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[529],{4529:(e,n,o)=>{o.r(n),o.d(n,{default:()=>r});var a=o(5155),t=o(2115);let r=e=>{let{htmlContent:n,mobileHtmlContent:o,desktopCss:r,mobileCss:s,mobileFooterHeight:i=400,desktopFooterHeight:l=700,preserveOriginalStyles:d=!1}=e,[c,u]=(0,t.useState)(!1),m=(0,t.useRef)(null),[g,f]=(0,t.useState)(300);(0,t.useEffect)(()=>{let e=()=>{u(window.innerWidth<768)};return e(),window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)},[]);let p=c&&o?o:n,h=(0,t.useRef)(300),v=(0,t.useRef)(0);return(0,t.useEffect)(()=>{if(!m.current)return;let e=m.current,n=n=>{if(n.source===e.contentWindow){let e=n.data;if(e&&"object"==typeof e&&"height"in e){let n=Number(e.height),o=Date.now();!isNaN(n)&&n>0&&Math.abs(n-h.current)>10&&o-v.current>200&&(h.current=n,v.current=o,f(n))}}};window.addEventListener("message",n);let o="\n      <style>\n        /* Importa\xe7\xe3o da fonte MiSans */\n        @font-face {\n          font-family: 'MiSans';\n          font-style: normal;\n          font-weight: 300;\n          src: url('/fonts/MiSans-Normal.ttf') format('truetype'),\n               url('/fonts/MiSans-Normal.woff2') format('woff2');\n          font-display: swap;\n        }\n        \n        @font-face {\n          font-family: 'MiSans';\n          font-style: normal;\n          font-weight: 400;\n          src: url('/fonts/MiSans-Regular.ttf') format('truetype'),\n               url('/fonts/MiSans-Regular.woff2') format('woff2');\n          font-display: swap;\n        }\n        \n        @font-face {\n          font-family: 'MiSans';\n          font-style: normal;\n          font-weight: 500;\n          src: url('/fonts/MiSans-Medium.ttf') format('truetype'),\n               url('/fonts/MiSans-Medium.woff2') format('woff2');\n          font-display: swap;\n        }\n        \n        @font-face {\n          font-family: 'MiSans';\n          font-style: normal;\n          font-weight: 600;\n          src: url('/fonts/MiSans-SemiBold.ttf') format('truetype'),\n               url('/fonts/MiSans-SemiBold.woff2') format('woff2');\n          font-display: swap;\n        }\n        \n        @font-face {\n          font-family: 'MiSans';\n          font-style: normal;\n          font-weight: 700;\n          src: url('/fonts/MiSans-Bold.ttf') format('truetype'),\n               url('/fonts/MiSans-Bold.woff2') format('woff2');\n          font-display: swap;\n        }\n        \n        html, body {\n          margin: 0;\n          padding: 0;\n          overflow: hidden; /* Remove barras de rolagem no conte\xfado */\n          ".concat(d?"":"\n          font-family: 'MiSans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n          font-size: 16px; /* Ajustado conforme observa\xe7\xe3o para melhorar layout */\n          ","\n          width: 100%;\n        }\n        \n        ").concat(r||"","\n        \n        @media (max-width: 768px) {\n          ").concat(s||"","\n        }\n      </style>\n    "),a="\n      <script>\n        const mobileFooterHeight = ".concat(i,";\n        const desktopFooterHeight = ").concat(l,";\n\n        (function() {\n          let lastHeight = 0;\n          let updateTimeout = null;\n          const debounceDelay = 100; // Reduzir o debounce para reagir mais r\xe1pido a mudan\xe7as\n          let consecutiveUpdates = 0; // Contador para detectar loop\n          const maxConsecutiveUpdates = 50; // Limite de atualiza\xe7\xf5es consecutivas\n\n          function postHeight() {\n            console.log('postHeight: Iniciando c\xe1lculo...'); // Log de in\xedcio\n            // Calcular a altura usando o maior valor entre body.scrollHeight e documentElement.scrollHeight\n            // Isso ajuda a capturar a altura total mesmo com margens ou paddings\n            const bodyScrollHeight = document.body.scrollHeight;\n            const docScrollHeight = document.documentElement.scrollHeight;\n            // Calcular a altura usando o maior valor entre body.scrollHeight e documentElement.scrollHeight\n            // Isso ajuda a capturar a altura total mesmo com margens ou paddings\n            const calculatedHeight = Math.max(bodyScrollHeight, docScrollHeight);\n\n            // A altura do iframe deve ser apenas a altura do seu conte\xfado.\n            // A p\xe1gina pai deve gerenciar o layout do footer separadamente.\n            const finalHeight = calculatedHeight;\n\n            console.log('postHeight: Valores calculados:', {\n              bodyScrollHeight,\n              docScrollHeight,\n              calculatedHeight,\n              finalHeight,\n              lastHeight\n            }); // Log de valores\n\n            // Evitar enviar a mesma altura repetidamente com uma pequena toler\xe2ncia\n            // Manter a toler\xe2ncia para 20px para evitar oscila\xe7\xf5es m\xednimas\n            if (Math.abs(finalHeight - lastHeight) < 20) { // Toler\xe2ncia de 20px\n              console.log('postHeight: Altura n\xe3o mudou significativamente (< 20px), ignorando postMessage.');\n              return;\n            }\n\n            // Debounce para evitar m\xfaltiplos posts em r\xe1pida sucess\xe3o\n            if (updateTimeout) {\n              clearTimeout(updateTimeout);\n            }\n\n            updateTimeout = setTimeout(() => {\n              lastHeight = finalHeight;\n              window.parent.postMessage({ height: finalHeight }, '*');\n              console.log('postHeight: Enviando altura:', finalHeight, 'Calculada:', calculatedHeight); // Log de c\xe1lculo e envio\n            }, debounceDelay); // Manter o debounce para estabilidade\n          }\n\n          // Usar ResizeObserver para detectar mudan\xe7as no conte\xfado do body\n          const resizeObserver = new ResizeObserver((entries) => {\n            console.log('ResizeObserver disparado:', entries); // Log do observer\n            postHeight();\n          });\n\n          // Observar o body para mudan\xe7as de tamanho\n          resizeObserver.observe(document.body);\n\n          // Enviar altura inicial ap\xf3s o DOM estar completamente carregado\n          document.addEventListener('DOMContentLoaded', () => {\n            console.log('Evento DOMContentLoaded disparado.'); // Log do DOMContentLoaded\n            postHeight();\n\n            // Configurar para recalcular altura quando imagens carregarem\n            const images = document.querySelectorAll('img');\n            images.forEach(img => {\n              if (!img.complete) {\n                img.addEventListener('load', () => {\n                  console.log('Imagem carregada:', img.src); // Log de imagem carregada\n                  postHeight();\n                }, { once: true });\n                img.addEventListener('error', () => {\n                  console.log('Erro ao carregar imagem:', img.src); // Log de erro de imagem\n                  postHeight();\n                }, { once: true });\n              } else {\n                console.log('Imagem j\xe1 carregada:', img.src); // Log de imagem j\xe1 carregada\n              }\n            });\n          });\n\n          // Enviar altura ap\xf3s o carregamento completo da p\xe1gina (incluindo assets)\n          window.addEventListener('load', () => {\n            console.log('Evento load disparado.'); // Log do load\n            postHeight();\n          });\n\n          // Atualizar altura em mudan\xe7as de orienta\xe7\xe3o (\xfatil para mobile)\n          window.addEventListener('orientationchange', () => {\n            console.log('Evento orientationchange disparado.'); // Log do orientationchange\n            setTimeout(postHeight, 300); // Pequeno delay para a orienta\xe7\xe3o se ajustar\n          });\n\n          // Atualizar altura em redimensionamento da janela (com debounce)\n          window.addEventListener('resize', () => {\n            console.log('Evento resize disparado.'); // Log do resize\n            postHeight(); // postHeight j\xe1 tem debounce interno\n          });\n\n          // Adicionar um MutationObserver para capturar mudan\xe7as no DOM que ResizeObserver pode perder\n          const mutationObserver = new MutationObserver((mutations) => {\n            console.log('MutationObserver disparado:', mutations); // Log do MutationObserver\n            postHeight();\n          });\n\n          // Observar o body e seus descendentes para mudan\xe7as\n          mutationObserver.observe(document.body, {\n            childList: true, // Observa adi\xe7\xe3o/remo\xe7\xe3o de n\xf3s\n            subtree: true,   // Observa todos os descendentes\n            attributes: true // Observa mudan\xe7as em atributos (como style, class)\n          });\n\n          // Limpar observers e listeners ao desmontar (embora em um iframe srcdoc isso seja menos cr\xedtico)\n          window.addEventListener('beforeunload', () => {\n            resizeObserver.disconnect();\n            mutationObserver.disconnect();\n            // N\xe3o \xe9 necess\xe1rio remover outros listeners aqui, pois o iframe ser\xe1 destru\xeddo\n          });\n\n        })();\n      <\/script>\n    ");return e.srcdoc='\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">\n          '.concat(o,"\n        </head>\n        <body>\n          ").concat(p,"\n          ").concat(a,"\n        </body>\n      </html>\n    "),()=>{window.removeEventListener("message",n)}},[n,o,c,r,s,i,l,d,m,p]),(0,a.jsx)("iframe",{ref:m,sandbox:"allow-scripts allow-same-origin",scrolling:"no",style:{width:"100%",height:"".concat(g,"px"),border:"none",display:"block",transition:"height 0.3s ease-in-out",overflow:"hidden"},className:"isolated-content-iframe w-full",title:"Conte\xfado Isolado do Produto"})}}}]);